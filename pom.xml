<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.kabouros</groupId>
	<artifactId>mybatis-kabouros</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>
	
	<properties>
	    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<mybatis.version>3.5.0</mybatis.version>
		<mybatis-spring.version>2.0.0</mybatis-spring.version>
		<mybatis-spring-boot-autoconfigure.version>2.0.0</mybatis-spring-boot-autoconfigure.version>
	    <mybatis-spring-boot-starter.version>2.0.0</mybatis-spring-boot-starter.version>
		<junit.version>4.12</junit.version>
		<maven-compiler-plugin.version>3.7.0</maven-compiler-plugin.version>
		<maven-enforcer-plugin.version>1.4.1</maven-enforcer-plugin.version>
		<maven-surefire-plugin.version>2.21.0</maven-surefire-plugin.version>
		<maven-install-plugin.version>2.5.2</maven-install-plugin.version>
		<maven-gpg-plugin.version>1.6</maven-gpg-plugin.version>
		<maven-source-plugin.version>3.0.1</maven-source-plugin.version>
		<maven-javadoc-plugin.version>2.10.4</maven-javadoc-plugin.version>
		<maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
		<maven-release-plugin.version>2.5.3</maven-release-plugin.version>
		<lifecycle-mapping.version>1.0.0</lifecycle-mapping.version>
	</properties>
	
	<scm>
	    <connection>scm:git:git://github.com/kabouros/mybatis-kabouros.git</connection>
		<developerConnection>scm:git:ssh://git@github.com/kabouros/mybatis-kabouros.git</developerConnection>
		<url>https://github.com/kabouros/mybatis-kabouros</url>
		<tag>HEAD</tag>
	</scm>
	
	
    <dependencyManagement>
	    <dependencies>
		    <dependency>
			    <groupId>com.kabouros</groupId>
				<artifactId>mybatis-kabouros-api</artifactId>
				<version>0.0.1-SNAPSHOT</version>
			</dependency>
			<dependency>
			    <groupId>com.kabouros</groupId>
				<artifactId>mybatis-kabouros-core</artifactId>
				<version>0.0.1-SNAPSHOT</version>
			</dependency>
			<dependency>
				<groupId>org.mybatis</groupId>
				<artifactId>mybatis</artifactId>
				<version>${mybatis.version}</version>
		    </dependency>
		    <dependency>
			    <groupId>org.mybatis</groupId>
				<artifactId>mybatis-spring</artifactId>
				<version>${mybatis-spring.version}</version>
		    </dependency>
		    <dependency>
		        <groupId>org.mybatis.spring.boot</groupId>
		        <artifactId>mybatis-spring-boot-autoconfigure</artifactId>
		        <version>${mybatis-spring-boot-autoconfigure.version}</version>
	        </dependency>
	        <dependency>
			    <groupId>org.mybatis.spring.boot</groupId>
				<artifactId>mybatis-spring-boot-starter</artifactId>
				<version>${mybatis-spring-boot-starter.version}</version>
		    </dependency>
		</dependencies>
	</dependencyManagement>
	
	
	
	<profiles>
	    <profile>
		    <id>java8</id>
			<activation>
				<jdk>${java.version}</jdk>
			</activation>
			<properties>
				<javadoc.parameters>-Xdoclint:none</javadoc.parameters>
			</properties>
		</profile>
		<profile>
			<id>release-sign-artifacts</id>
			<activation>
				<property>
					<name>gpg.sign</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<!-- 自动完成签名 -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>${maven-gpg-plugin.version}</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
								<configuration>
									<useAgent>false</useAgent>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
	
	<build>
	    <plugins>
		    <plugin>
			    <groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<showWarnings>true</showWarnings>
					<!-- Open the parameter compiler -->
					<parameters>true</parameters>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>${maven-enforcer-plugin.version}</version>
				<executions>
					<!-- 检查依赖冲突 -->
					<execution>
						<id>enforce</id>
						<configuration>
							<rules>
								<dependencyConvergence/>
							</rules>
						</configuration>
						<goals>
							<goal>enforce</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven-surefire-plugin.version}</version>
				<configuration>
					<!-- 跳过测试，等同 "-Dmaven.test.skip=true" -->
					<skipTests>true</skipTests>
				</configuration>
			</plugin>
			<!-- 打包时自动将jar和pom安装到本地仓库 -->
			<plugin>
			    <groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-install-plugin</artifactId>
				<version>${maven-install-plugin.version}</version>
				<configuration>
					<createChecksum>true</createChecksum>
				</configuration>
			</plugin>
			<!-- 自动部署到远程仓库 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>${maven-deploy-plugin.version}</version>
				<configuration>
					<retryFailedDeploymentCount>10</retryFailedDeploymentCount>
					<!-- 跳过部署到远程仓库，如果有搭建私库就不要跳过了 -->
					<skip>true</skip>
				</configuration>
			</plugin>
			<!-- 打包 source.jar -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>${maven-source-plugin.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration>
							<excludes>
								<exclude>*.jar</exclude>
							</excludes>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- 生成java doc -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>${maven-javadoc-plugin.version}</version>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<additionalparam>${javadoc.parameters}</additionalparam>
				</configuration>
			</plugin>
			<!-- 插件地址：http://maven.apache.org/maven-release/maven-release-plugin/index.html -->
			<!-- release版本自动构建<只能构建快照版本，即以-SNAPSHOT结尾的版本>，构建流程如下： -->
			<!-- mvn release:clean #清理 -->
			<!-- 如果要创建分支的话执行： mvn release:branch -DbranchName=分支名称 -DupdateBranchVersions=true -DupdateWorkingCopyVersions=false -->
			<!-- 比如指定分支名称为0.0.1.x，表示会有版本0.0.1.1，0.0.1.2等等，如果分支名称不是这个规范后面将改变不了版本号 -->
			<!-- 接下来会提示修改版本号，比如修改成：0.0.1.1-SNAPSHOT -->
			<!-- mvn release:prepare #准备发布打标签，这个时候会有一个交互过程。 -->
			<!-- mvn release:perform #发布，打包 -->
			<plugin>
			    <groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>${maven-release-plugin.version}</version>
				<configuration>
				    <useReleaseProfile>false</useReleaseProfile>
					<!-- 每个模块获得与父POM相同的版本 -->
					<autoVersionSubmodules>true</autoVersionSubmodules>
					<tagNameFormat>v@{project.version}</tagNameFormat>
				</configuration>
			</plugin>
		</plugins>
		<pluginManagement>
		    <plugins>
			    <!-- 自定义M2E生命周期 -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>${lifecycle-mapping.version}</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-enforcer-plugin</artifactId>
										<versionRange>[${lifecycle-mapping.version},)</versionRange>
										<goals>
											<goal>enforce</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore/>
									</action>
								</pluginExecution>
						    </pluginExecutions>
					    </lifecycleMappingMetadata>
				    </configuration>
			    </plugin>
		    </plugins>
	    </pluginManagement>
	</build>

    <modules>
        <module>mybatis-kabouros-api</module>
        <module>mybatis-kabouros-core</module>
        <module>mybatis-kabouros-spring</module>
    </modules>
    
</project>